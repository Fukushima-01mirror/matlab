classdef ZCDataCorrelation3d_approxiFlatSurf_ex2 < Analyze.Base
    %STANDARDDEVIATION このクラスの概要をここに記述
    %   詳細説明をここに記述

    properties
    end

    methods
        function obj = ZCDataCorrelation3d_approxiFlatSurf_ex2(config,data)
            obj = obj@Analyze.Base(config,data);
        end

        function runForAlone(obj,user)
           [period_zx, peak_zx] = Rhythm.setZeroCrossPeriodData(user.zeroCrossData);
           %　ゼロクロス間でのピーク回数取得
           [zeroCrossTimes] = Rhythm.setZeroCrossCount(user.zeroCrossData);
            
            Y = abs( user.zeroCrossData.nonlogAvtVelocity );
            X1 = abs( period_zx(:,3)  );
            X2 = abs( peak_zx(:,3)  );
            
            if obj.currentRunType == obj.runTypePlayer1 ...
                    || ( obj.currentRunType == obj.runTypeArchive && obj.config.isExistPlayer1 )
                IndexZeroCross = find(zeroCrossTimes(:,1)<2&zeroCrossTimes(:,2)<2 ...
                    & obj.data.player1.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) + obj.data.player1.time.highSampled(1) );
                IndexNonZeroCross = find( zeroCrossTimes(:,1)>1|zeroCrossTimes(:,2)>1 ...
                    & obj.data.player1.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) + obj.data.player1.time.highSampled(1) );
            elseif obj.currentRunType == obj.runTypePlayer2 ...
                    || ( obj.currentRunType == obj.runTypeArchive && obj.config.isExistPlayer2 )
                IndexZeroCross = find(zeroCrossTimes(:,1)<2&zeroCrossTimes(:,2)<2 ...
                    & obj.data.player2.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) + obj.data.player2.time.highSampled(1) );
                IndexNonZeroCross = find( zeroCrossTimes(:,1)>1|zeroCrossTimes(:,2)>1 ...
                    & obj.data.player2.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) + obj.data.player2.time.highSampled(1) );
            end

            Y_zc  = Y(IndexZeroCross);        Y_nzc  = Y(IndexNonZeroCross);
            X1_zc = X1(IndexZeroCross,:);     X1_nzc = X1(IndexNonZeroCross,:);
            X2_zc = X2(IndexZeroCross,:);     X2_nzc = X2(IndexNonZeroCross,:);

            %外れ値を除外するため，最大データ２つをカット
            [X1_max,X1_imax] = max(X1_zc);     X1_zc(X1_imax)= [];	 X2_zc(X1_imax)= [];     Y_zc(X1_imax)= [];
            [X1_max,X1_imax] = max(X1_zc);     X1_zc(X1_imax)= [];	 X2_zc(X1_imax)= [];     Y_zc(X1_imax)= [];
            [X2_max,X2_imax] = max(X2_zc);     X1_zc(X2_imax)= [];	 X2_zc(X2_imax)= [];     Y_zc(X2_imax)= [];
            [X2_max,X2_imax] = max(X2_zc);     X1_zc(X2_imax)= [];	 X2_zc(X2_imax)= [];     Y_zc(X2_imax)= [];
%             [Y_max,Y_imax] = max(Y_zc);     X1_zc(Y_imax)= [];	 X2_zc(Y_imax)= [];     Y_zc(Y_imax)= [];
%             [Y_max,Y_imax] = max(Y_zc);     X1_zc(Y_imax)= [];	 X2_zc(Y_imax)= [];     Y_zc(Y_imax)= [];
%             while max(Y_zc./X1_zc) > 1000
%                 [Y_X1_max,Y_X1_imax] = max(Y_zc./X1_zc);     X1_zc(Y_X1_imax)= [];	 X2_zc(Y_X1_imax)= [];     Y_zc(Y_X1_imax)= [];
%                 [Y_X1_max,Y_X1_imax] = max(Y_zc./X1_zc);     X1_zc(Y_X1_imax)= [];	 X2_zc(Y_X1_imax)= [];     Y_zc(Y_X1_imax)= [];
%             end
%             while max(Y_zc./X2_zc) > 1000
%                 [Y_X2_max,Y_X2_imax] = max(Y_zc./X2_zc);     X1_zc(Y_X2_imax)= [];	 X2_zc(Y_X2_imax)= [];     Y_zc(Y_X2_imax)= [];
%                 [Y_X2_max,Y_X2_imax] = max(Y_zc./X2_zc);     X1_zc(Y_X2_imax)= [];	 X2_zc(Y_X2_imax)= [];     Y_zc(Y_X2_imax)= [];
%             end

%%
            figure;
            MonitorSize = [ 0, 0, 500, 500];
            set(gcf, 'Position', MonitorSize);
            
            [fitParam3, X1FIT, X2FIT, YFIT , fitR, yhat, fitR2 ,resError, SER ]  = Rhythm.approxiSurface_flat(X1_zc , X2_zc , Y_zc );
            Yzc_sh = 11000;
            index_break = find( Y_zc >Yzc_sh);
            index_else = find(Y_zc<=Yzc_sh);
            plot3( X1_zc(index_else)  , X2_zc(index_else) , Y_zc(index_else),   'Marker','*', 'LineStyle','none');
            hold on
                plot3( X1_zc(index_break)  , X2_zc(index_break) , Y_zc(index_break),   'Marker','*', 'LineStyle','none'  , 'Color' , 'r');
                plot3( X1_nzc  , X2_nzc , Y_nzc, 'Marker','o', 'LineStyle','none');
                mesh(X1FIT,X2FIT,YFIT, 'faceAlpha',0.5);
            hold off
            grid on
            view(-30,30);
            xlabel('操作波形 周期の差');  ylabel('操作波形 振幅の差');  zlabel('対数演算前アバタ速さ');
            xlim([0 600]);            ylim([0 600]);          zlim([0 50000]);

            if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                xlim([0,600]);      ylim([0,600]);         zlim([0 50000]);
            end

            [zY_zc , m_Y , s_Y]  = zscore( Y_zc);
            [zX1_zc , m_X1 , s_X1] = zscore( X1_zc);
            [zX2_zc , m_X2 , s_X2] = zscore( X2_zc);
            [zfitParam, zX1FIT, zX2FIT, zYFIT , zfitR, zyhat, zfitR2 ]  = Rhythm.approxiSurface_flat(zX1_zc , zX2_zc , zY_zc );

            title({['V = (' num2str(fitParam3(1)) ') + (' num2str( fitParam3(2) ) ') * dPeriod + (' num2str( fitParam3(3)) ') * dPeak']; ...
                      ['標準化係数　dPeriod：' num2str( zfitParam(2) ) '，dPeak：' num2str( zfitParam(3) )];...
                    ['相関係数R：' num2str( fitR ) '，決定係数R^2：' num2str( fitR2 ) '，標準誤差(残差の標準偏差)：' num2str(SER) ];...
                  ['データ数:' num2str( length(user.time.highSampled)  - obj.config.analyzeTime(1) ) '[ms],(' num2str( length(Y_zc) ) ')' ] });
            axis square
%             if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
%                 obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state ]);
%             else
%                 obj.saveGraph();
%             end


            figure
               time_break = user.zeroCrossData.zeroCrossTime(index_break);
               plot(   user.time.highSampled,  user.avatarPosition.highSampled);         
               hold on
                    % 実験条件の描画
                    if ~isempty( strfind( char(obj.config.examType), '追い込まれ') ) ...
                            || ~isempty( strfind( char(obj.config.examType), '追い込む実験') )
                        plot(   obj.data.com.time,  obj.data.com.avatarPosition , 'k:');               
                        if ~isempty(strfind( char(obj.config.examType), '両側') )  
                            plot(   obj.data.com2.time,  obj.data.com2.avatarPosition , 'k:');     
                        end
                    elseif ~isempty(  findstr( char( obj.config.examType ) , '追従'))
                        if ~isempty(  findstr( char( obj.config.examType ) , '目標追従'))
                            plot(   obj.data.task.time,  obj.data.task.avatarPosition , 'color' ,[.8 .8 .8]);   
                            plot(   obj.data.task.time,  obj.data.task.avatarPosition-75 , 'color' ,[.8 .8 .8]);   
                        else
                            plot(   obj.data.task.time,  obj.data.task.avatarPosition , 'k:');   
                        end
                    elseif obj.config.isExistPlayer1 && obj.config.isExistPlayer2
                        if obj.currentRunType == obj.runTypePlayer1
                            plot( obj.data.player2.time.highSampled , obj.data.player2.avatarPosition.highSampled , 'k:');
                        elseif obj.currentRunType == obj.runTypePlayer2
                            plot( obj.data.player1.time.highSampled , obj.data.player1.avatarPosition.highSampled , 'k:');
                        end
                    end
                    for i= 1:length(time_break)
                        plot([time_break(i) time_break(i)], [0 1000], 'm');
                    end
                hold off

            %%      近似面　係数　エクセルデータ出力  
%             outputTitle = { '定数項', '周期差', '(標準化)',...
%                                     '振幅差', '(標準化)', '重相関R', '重決定R2' ,'標準誤差(残差の標準偏差)' };
%             output = num2cell( [fitParam3(1) fitParam3(2) zfitParam(2) fitParam3(3) zfitParam(3) fitR fitR2 SER ] );
%             
%             if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
%                 obj.outputAllToXlsWithName([ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state ] , output , outputTitle)
%             else
%                 obj.outputAllToXls(output , outputTitle);
%             end

        end

        function runForPair(obj,user1 ,user2)
%             obj.runForAlone(user1);
%             obj.runForAlone(user2);
%             
            
        end

        
    end
end
