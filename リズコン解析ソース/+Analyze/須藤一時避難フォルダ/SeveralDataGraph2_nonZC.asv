classdef SeveralDataGraph2_nonZC < Analyze.Base
    %STANDARDDEVIATION このクラスの概要をここに記述
    %   詳細説明をここに記述

    properties
    end

    methods
        function obj = SeveralDataGraph2_nonZC(config,data)
            obj = obj@Analyze.Base(config,data);
        end

        function runForAlone(obj,user)
            
            %　ゼロクロス間でのピーク回数取得
            [zeroCrossTimes] = Rhythm.setZeroCrossCount(user.zeroCrossData);

            %　ゼロクロスしている時のインデックス
            IndexZeroCross = find(zeroCrossTimes(:,1)<2&zeroCrossTimes(:,2)<2);
            %　ゼロクロスしない時のインデックス
            IndexNonZeroCross = find( zeroCrossTimes(:,1)>1 | zeroCrossTimes(:,2)>1);
             
%             %%      ゼロクロス回避の起こる頻度　エクセルデータ出力  
%             NonZC_Percent = length( find( zeroCrossTimes(:,1)>1) ) / length(user.zeroCrossData.peak ) *100;
%             outputTitle = { 'ゼロクロス回避頻度[%]' };
%             output = num2cell( NonZC_Percent );
%             obj.outputAllToXls(output , outputTitle);
            %%
           
            if ~isempty(  findstr( char( obj.config.examType ) , '追従'))
                bDirect(1,1) = mean( obj.data.task.avatarPosition(1:10) ) ...
                                        - obj.data.task.avatarPosition(1) >0;     
                % trueの時　速度：正　　falseの時　速度:負
                swTiming(1,1) = 0;
                j=1; 
                for i = 1:length(obj.data.task.time)
                    if bDirect(j,1) && obj.data.task.avatarPosition(i) >= obj.data.task.otherData(i,2)
                        j=j+1;
                        swTiming(j,1) = obj.data.task.time(i);
                        bDirect(j,1) = false;
                    end
                    if ~bDirect(j,1) && obj.data.task.avatarPosition(i) <= obj.data.task.otherData(i,1)
                        j=j+1;
                        swTiming(j,1) = obj.data.task.time(i);
                        bDirect(j,1) = true;
                    end
                end
            end
            
            [period_zx, peak_zx] = Rhythm.setZeroCrossPeriodData(user.zeroCrossData);
            MonitorSize = [ 0, 0, 1200, 1000];
            set(gcf, 'Position', MonitorSize);
            t_st =  user.time.highSampled(1)-1;
            for i = 1: ceil( length(user.time.highSampled) /20000 )
                r_fig = 6;

%%           アバタ位置描画
               ax(1) = subplot(r_fig, 1, 1)     ;
               plot(   user.time.highSampled,  user.avatarPosition.highSampled);         
                % 自動アバタの位置描画
                hold on
                    % 実験条件の描画
                    if ~isempty( strfind( char(obj.config.examType), '追い込まれ') ) ...
                            || ~isempty( strfind( char(obj.config.examType), '追い込む実験') )
                        plot(   obj.data.com.time,  obj.data.com.avatarPosition , 'k:');               
                        if ~isempty(strfind( char(obj.config.examType), '両側') )  
                            plot(   obj.data.com2.time,  obj.data.com2.avatarPosition , 'k:');     
                        end
                    elseif ~isempty(  findstr( char( obj.config.examType ) , '追従'))
                        if ~isempty(  findstr( char( obj.config.examType ) , '目標追従'))
                            plot(   obj.data.task.time,  obj.data.task.avatarPosition , 'color' ,[.8 .8 .8]);   
                            plot(   obj.data.task.time,  obj.data.task.avatarPosition-75 , 'color' ,[.8 .8 .8]);   
                        else
                            plot(   obj.data.task.time,  obj.data.task.avatarPosition , 'k:');   
                        end
                    elseif obj.config.isExistPlayer1 && obj.config.isExistPlayer2
                        if obj.currentRunType == obj.runTypePlayer1
                            plot( obj.data.player2.time.highSampled , obj.data.player2.avatarPosition.highSampled , 'k:');
                        elseif obj.currentRunType == obj.runTypePlayer2
                            plot( obj.data.player1.time.highSampled , obj.data.player1.avatarPosition.highSampled , 'k:');
                        end
                    end
                    %　ゼロクロスしないタイミングを描画
                    for j= 1: length(IndexNonZeroCross)
                        zeroCrossTime = user.zeroCrossData.zeroCrossTime(IndexNonZeroCross(j) );
                        plot([zeroCrossTime zeroCrossTime],[0 1000],...
                            'Color' , [1 0 0] , 'LineStyle', ':');
                    end
                    if ~isempty(  findstr( char( obj.config.examType ) , '追従'))
                        for j=1:length(swTiming)
                            plot( [swTiming(j) swTiming(j)],[-1000 1000], 'Color' , 'k' , 'LineStyle', ':');
                        end
                    end
                hold off
                xlabel('時間t ms'); ylabel('アバタ位置');
                xlim([t_st+20000*(i-1) t_st+20000*i]);    ylim([0 1000]);
               

%%            コントローラ操作描画    
                ax(2) = subplot(r_fig,1,2);
                plot(   user.time.highSampled,  user.operatePulse.highSampled );               
                hold on %　ゼロクロスしないタイミングを描画
                    for j= 1: length(IndexNonZeroCross)
                        zeroCrossTime = user.zeroCrossData.zeroCrossTime(IndexNonZeroCross(j) );
                        plot([zeroCrossTime zeroCrossTime],[-400 400],...
                            'Color' , [1 0 0] , 'LineStyle', ':');
                    end
                    plot([0 60000], [0 0] ,'k')
                    if ~isempty(  findstr( char( obj.config.examType ) , '追従'))
                        for j=1:length(swTiming)
                            plot( [swTiming(j) swTiming(j)],[-1000 1000], 'Color' , 'k' , 'LineStyle', ':');
                        end
                    elseif obj.config.isExistPlayer1 && obj.config.isExistPlayer2
                        if obj.currentRunType == obj.runTypePlayer1
                            plot( obj.data.player2.time.highSampled , obj.data.player2.operatePulse.highSampled , 'k:');
                        elseif obj.currentRunType == obj.runTypePlayer2
                            plot( obj.data.player1.time.highSampled , obj.data.player1.operatePulse.highSampled , 'k:');
                        end
                    end
                hold off
                xlabel('時間t ms'); ylabel('コントローラ操作');
                xlim([t_st+20000*(i-1) t_st+20000*i]);
                if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                    ylim([-400 400]);
                end
%                 grid on;
                set(gca,'YTick',[-400:100:400]);

%%            アバタ速度     
                ax(3) = subplot(r_fig,1,3);
                plot(   user.time.highSampled,  user.avatarVelocity.highSampled );               
                hold on %　ゼロクロスしないタイミングを描画
                   for j= 1: length(IndexNonZeroCross)
                        zeroCrossTime = user.zeroCrossData.zeroCrossTime(IndexNonZeroCross(j) );
                        plot([zeroCrossTime zeroCrossTime],[-0.5 0.5],...
                            'Color' , [1 0 0] , 'LineStyle', ':');
                    end
                    plot([0 60000], [0 0] ,'k')
                    if ~isempty(  findstr( char( obj.config.examType ) , '追従'))
%                         plot(   obj.data.task.time,  obj.data.task.otherData(:,4) , 'k:');               
                        for j=1:length(swTiming)
                            plot( [swTiming(j) swTiming(j)],[-1000 1000], 'Color' , 'k' , 'LineStyle', ':');
                        end
                    elseif obj.config.isExistPlayer1 && obj.config.isExistPlayer2
                        if obj.currentRunType == obj.runTypePlayer1
                            plot( obj.data.player2.time.highSampled , obj.data.player2.avatarVelocity.highSampled , 'k:');
                        elseif obj.currentRunType == obj.runTypePlayer2
                            plot( obj.data.player1.time.highSampled , obj.data.player1.avatarVelocity.highSampled , 'k:');
                        end
                    end
                hold off
                xlabel('時間t ms'); ylabel('アバタ速度');
                xlim([t_st+20000*(i-1) t_st+20000*i]);
                if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                    ylim([-0.5 0.5]);
                end
%                 grid on;
                set(gca,'YTick',[-0.5:0.1:0.5]);
                 
%%            アバタ速さ     
               ax(4) = subplot(r_fig,1,4);
                plot(   user.time.highSampled, abs( user.avatarVelocity.highSampled ) );               
                hold on %　ゼロクロスしないタイミングを描画
                    for j= 1: length(IndexNonZeroCross)
                        zeroCrossTime = user.zeroCrossData.zeroCrossTime(IndexNonZeroCross(j) );
                        plot([zeroCrossTime zeroCrossTime],[-0.5 0.5],...
                            'Color' , [1 0 0] , 'LineStyle', ':');
                    end
                    plot([0 60000], [0 0] ,'k')
                    if ~isempty(  findstr( char( obj.config.examType ) , '追従'))
%                         plot(   obj.data.task.time,  obj.data.task.otherData(:,4) , 'k:');               
                        for j=1:length(swTiming)
                            plot( [swTiming(j) swTiming(j)],[-1000 1000], 'Color' , 'k' , 'LineStyle', ':');
                        end
                    elseif obj.config.isExistPlayer1 && obj.config.isExistPlayer2
                        if obj.currentRunType == obj.runTypePlayer1
                            plot( obj.data.player2.time.highSampled , abs( obj.data.player2.avatarVelocity.highSampled ), 'k:');
                        elseif obj.currentRunType == obj.runTypePlayer2
                            plot( obj.data.player1.time.highSampled , abs( obj.data.player1.avatarVelocity.highSampled ), 'k:');
                        end
                    end
                hold off
                xlabel('時間t ms'); ylabel('アバタ速度');
                xlim([t_st+20000*(i-1) t_st+20000*i]);
                if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                    ylim([ 0 0.5]);
                end
%                 grid on;
                set(gca,'YTick',[0:0.1:0.5]);

%%            ゼロクロス周期の差,ゼロクロス振幅の差
                ax(5) = subplot(r_fig,1,5);
                [AX,H1,H2] = plotyy(   user.zeroCrossData.zeroCrossTime, abs(period_zx(:,3)),...
                                        user.zeroCrossData.zeroCrossTime, abs(peak_zx(:,3)));
                if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                    set(AX(1), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600], 'YTick' , [0:100:600]);
                    set(AX(2), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600], 'YTick' , [0:100:600]);
                else
                    set(AX(1), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600]);
                    set(AX(2), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600]);
                end
                                    

                set(H1, 'Color', 'b');  set(H2, 'Color', 'c');
                hold( AX(1) ,'on') %　ゼロクロスしないタイミングを描画
                    for j= 1: length(IndexNonZeroCross)
                        zeroCrossTime = user.zeroCrossData.zeroCrossTime(IndexNonZeroCross(j) );
                        plot([zeroCrossTime zeroCrossTime],[0 600], 'Color' , [1 0 0] , 'LineStyle', ':');
                    end
                    if ~isempty(  findstr( char( obj.config.examType ) , '追従'))
                        for j=1:length(swTiming)
                            plot( [swTiming(j) swTiming(j)],[-1000 1000], 'Color' , 'k' , 'LineStyle', ':');
                        end
                    end
                hold off
                legend( [H1, H2], '周期の差', '振幅の差' );                
                xlabel('時間');
                ylabel(AX(1) , '操作周期の差');     ylabel(AX(2) , '操作振幅の差');

%%          　ゼロクロス周期・振幅
                ax(6) = subplot(r_fig,1,6);
                [AX,H1,H2] = plotyy(   user.zeroCrossData.zeroCrossTime, period_zx(:,2),...
                                        user.zeroCrossData.zeroCrossTime, peak_zx(:,2));
                   
                if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                    set(AX(1), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600], 'YTick' , [0:100:600]);
                    set(AX(2), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600], 'YTick' , [0:100:600]);
                else
                    set(AX(1), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600] );
                    set(AX(2), 'YColor', 'k',...
                        'XLim', [t_st+20000*(i-1) t_st+20000*i], 'YLim', [0 600] );
                end

                set(H1, 'Color', 'b');  set(H2, 'Color', 'c');
                hold( AX(1) ,'on') %　ゼロクロスしないタイミングを描画
                    for j= 1: length(IndexNonZeroCross)
                        zeroCrossTime = user.zeroCrossData.zeroCrossTime(IndexNonZeroCross(j) );
                        plot([zeroCrossTime zeroCrossTime],[0 600], 'Color' , [1 0 0] , 'LineStyle', ':');
                    end
                    if ~isempty(  findstr( char( obj.config.examType ) , '追従'))
                        for j=1:length(swTiming)
                            plot( [swTiming(j) swTiming(j)],[-1000 1000], 'Color' , 'k' , 'LineStyle', ':');
                        end
                    end
                hold off
                legend( [H1, H2], '周期', '振幅' );                
                xlabel('時間');
                ylabel(AX(1) , '操作周期');     ylabel(AX(2) , '操作振幅');
               
                linkaxes(ax, 'x');
                if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                    obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) , num2str(i)] );
                else
                    obj.saveGraphWithName( [num2str(i)] );
                end
                               
           end
        end

        function runForPair(obj,user1,user2)

            
        end

    end
end
