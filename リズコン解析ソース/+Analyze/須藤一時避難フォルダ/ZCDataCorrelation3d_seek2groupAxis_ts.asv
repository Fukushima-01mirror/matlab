classdef ZCDataCorrelation3d_seek2groupAxis_ts < Analyze.Base
    %STANDARDDEVIATION このクラスの概要をここに記述
    %   詳細説明をここに記述

    properties
    end

    methods
        function obj = ZCDataCorrelation3d_seek2groupAxis_ts(config,data)
            obj = obj@Analyze.Base(config,data);
        end

        function runForAlone(obj,user)
            if  obj.currentRunType == 2
                playerName = char( obj.config.player1UserName );
            elseif obj.currentRunType == 3
                playerName = char( obj.config.player2UserName );
            end
%            if  ~isempty(  findstr( playerName , '(F)'))

               [period_zx, peak_zx] = Rhythm.setZeroCrossPeriodData(user.zeroCrossData);
               %　ゼロクロス間でのピーク回数取得
               [zeroCrossTimes] = Rhythm.setZeroCrossCount(user.zeroCrossData);

                Y = abs( user.zeroCrossData.nonlogAvtVelocity );
                dT = abs( period_zx(:,3) );
                dA = abs( peak_zx(:,3) );
                Time = abs( user.zeroCrossData.zeroCrossTime );


                if obj.currentRunType == obj.runTypePlayer1
                    IndexZeroCross = find(zeroCrossTimes(:,1)<2&zeroCrossTimes(:,2)<2 ...
                        & obj.data.player1.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
                    IndexNonZeroCross = find( zeroCrossTimes(:,1)>1|zeroCrossTimes(:,2)>1 ...
                        & obj.data.player1.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
                elseif obj.currentRunType == obj.runTypePlayer2
                    IndexZeroCross = find(zeroCrossTimes(:,1)<2&zeroCrossTimes(:,2)<2 ...
                        & obj.data.player2.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
                    IndexNonZeroCross = find( zeroCrossTimes(:,1)>1|zeroCrossTimes(:,2)>1 ...
                        & obj.data.player2.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
                end

                Y_zc  = Y(IndexZeroCross);             Y_nzc  = Y(IndexNonZeroCross);
                dT_zc = dT(IndexZeroCross,:);          dT_nzc = dT(IndexNonZeroCross,:);
                dA_zc = dA(IndexZeroCross,:);          dA_nzc = dA(IndexNonZeroCross,:);
                Time_zc = Time(IndexZeroCross);        Time_nzc  = Time(IndexNonZeroCross);

                %外れ値を除外するため，最大データ２つをカット
                [dT_max,dT_imax] = max(dT_zc);     dT_zc(dT_imax)= [];	 dA_zc(dT_imax)= [];     Y_zc(dT_imax)= [];     Time_zc(dT_imax)= [];
                [dT_max,dT_imax] = max(dT_zc);     dT_zc(dT_imax)= [];	 dA_zc(dT_imax)= [];     Y_zc(dT_imax)= [];     Time_zc(dT_imax)= [];
                [dA_max,dA_imax] = max(dA_zc);     dT_zc(dA_imax)= [];	 dA_zc(dA_imax)= [];     Y_zc(dA_imax)= [];     Time_zc(dA_imax)= [];
                [dA_max,dA_imax] = max(dA_zc);     dT_zc(dA_imax)= [];	 dA_zc(dA_imax)= [];     Y_zc(dA_imax)= [];     Time_zc(dA_imax)= [];
    %             [Y_max,Y_imax] = max(Y_zc);     dT_zc(Y_imax)= [];	 dA_zc(Y_imax)= [];     Y_zc(Y_imax)= [];
    %             [Y_max,Y_imax] = max(Y_zc);     dT_zc(Y_imax)= [];	 dA_zc(Y_imax)= [];     Y_zc(Y_imax)= [];
    %             while max(Y_zc./dT_zc) > 1000
    %                 [Y_dT_max,Y_dT_imax] = max(Y_zc./dT_zc);     dT_zc(Y_dT_imax)= [];	 dA_zc(Y_dT_imax)= [];     Y_zc(Y_dT_imax)= [];
    %                 [Y_dT_max,Y_dT_imax] = max(Y_zc./dT_zc);     dT_zc(Y_dT_imax)= [];	 dA_zc(Y_dT_imax)= [];     Y_zc(Y_dT_imax)= [];
    %             end
    %             while max(Y_zc./dA_zc) > 1000
    %                 [Y_dA_max,Y_dA_imax] = max(Y_zc./dA_zc);     dT_zc(Y_dA_imax)= [];	 dA_zc(Y_dA_imax)= [];     Y_zc(Y_dA_imax)= [];
    %                 [Y_dA_max,Y_dA_imax] = max(Y_zc./dA_zc);     dT_zc(Y_dA_imax)= [];	 dA_zc(Y_dA_imax)= [];     Y_zc(Y_dA_imax)= [];
    %             end
    %  
                Nzc = length(Y_zc) ;
                Nnzc = length(Y_nzc) ;

    %%        ΔAとΔTの散布図
    %             figure(200)
    %             [ fitParam_dTdA, fitLineR_dTdA, lineEdgePoint] = Rhythm.approxiLine2d(dT_zc  ,dA_zc );
    %             a = fitParam_dTdA(1);   b = fitParam_dTdA(2);
    %             plot( dT_zc   ,dA_zc  , 'Marker','*', 'LineStyle','none');
    %             hold on
    %                 plot( dT_nzc   ,dA_nzc ,'Marker','o', 'LineStyle','none' );
    %                 plot(lineEdgePoint(:,1), lineEdgePoint(:,2), '--r');
    % %                 plot([ 0:50:300 ], [100 100 200 300 400 500 600],'--m');
    % %                 plot([ 50 50 100:50:300 ], [0:100:600],'--c');
    %             hold off
    %             grid on
    %             xlabel('操作波形 周期の差　ΔT');    ylabel('操作波形　振幅の差　ΔA'); 
    %             xlim([0,600]);            ylim([0,600]);
    %             title({['ΔA =  (' num2str( a ) ') * ΔT  + (' num2str( b ) ')']; ...
    %                     ['相関係数R：' num2str( fitLineR_dTdA(1)) '　　決定係数R^2' num2str( fitLineR_dTdA(1)^2)]});
    %%
    %             MonitorSize = [ 0, 0, 800, 800];
    %             set(gcf, 'Position', MonitorSize);
    %             
    %             if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
    %                 obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_散布図(ΔA-ΔT)領域分け']);
    %             else
    %                 obj.saveGraphWithName('_散布図(ΔA-ΔT)領域分け');
    %             end

    %%          グループ分け

            MonitorSize = [ 0, 0, 600, 500];
            set(gcf, 'Position', MonitorSize);

            dA_border =100;
            dT_border = 50;
            k_border =2;
            indexG0 = find( dT_zc < dT_border & dA_zc < dA_border );
            indexG01 = find( dT_zc >= dT_border & (dA_zc)./dT_zc <= k_border );
            indexG02 = find( dA_zc >= dA_border & (dA_zc)./dT_zc > k_border );
            indexG1 = sort([indexG0 ; indexG01]);
    %         indexG1 = sort([indexG01]);
            indexG2 = sort([indexG0 ; indexG02]);
        %     dA_g1 = dA_zc(indexG1);     dT_g1 = dT_zc(indexG1);     Y_g1 = Y_zc(indexG1);
        %     dA_g2 = dA_zc(indexG2);     dT_g2 = dT_zc(indexG2);     Y_g2 = Y_zc(indexG2);

                subplot(2,2,1);
            plot( dT_zc(indexG1) , dA_zc(indexG1)  , 'Marker','*', 'LineStyle','none');
            hold on
                plot( dT_zc(indexG0) , dA_zc(indexG0) ,'Color', 'c'  , 'Marker','*', 'LineStyle','none');
                         plot([ 0:50:300 ], [100 100 200 300 400 500 600],'r');
            hold off
            grid on
            axis square
            xlabel('操作波形 周期の差　ΔT group1');    ylabel('操作波形　振幅の差　ΔA group1'); 
            xlim([0,600]);            ylim([0,600]);
            title({['データ数' num2str(length(Y_zc(indexG1)))]});

                subplot(2,2,2);
            plot(dT_zc(indexG2) , dA_zc(indexG2)   ,'Color', [0 0.5 0] , 'Marker','*', 'LineStyle','none');
            hold on
                plot( dT_zc(indexG0) , dA_zc(indexG0) ,'Color', 'c' , 'Marker','*', 'LineStyle','none');
                        plot([ 50 50 100:50:300 ], [0:100:600],'r');
            hold off
            grid on
            axis square
            xlabel('操作波形 周期の差　ΔT group2');    ylabel('操作波形　振幅の差　ΔA group2'); 
            xlim([0,600]);            ylim([0,600]);
            title({['データ数' num2str( length( Y_zc(indexG2) ) )]});

                subplot(2,2,[3 4]);
            plot( dT_zc(indexG1) , dA_zc(indexG1)   ,'Color', 'b' , 'Marker','*', 'LineStyle','none');
            hold on
                plot(dT_zc(indexG2) , dA_zc(indexG2)   ,'Color', [0 0.5 0] , 'Marker','*', 'LineStyle','none');
                plot( dT_zc(indexG0) , dA_zc(indexG0) ,'Color', 'c'  , 'Marker','*', 'LineStyle','none');
                plot([ 0:50:300 ], [100 100 200 300 400 500 600],'r');
                plot([ 50 50 100:50:300 ], [0:100:600],'r');
            hold off
            grid on
            axis square
            xlabel('操作波形 周期の差　ΔT');    ylabel('操作波形　振幅の差　ΔA'); 
            xlim([0,600]);            ylim([0,600]);
            title({['データ数' num2str(length(Y_zc))]});

                %%

                if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                    obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_散布図(ΔA-ΔT)グループ分け']);
                else
                    obj.saveGraphWithName('_散布図(ΔA-ΔT)グループ分け');
                end


                %%  
                bFig =1;
            % クラスター1
                [k1_g1 , k2_g1, X1_g1, fitParam_X1Y_g1, fitLineR_X1Y_g1] = Rhythm.PCA_regress_3dplot(dT_zc(indexG1) , dA_zc(indexG1) , Y_zc(indexG1) , bFig) ;
                %%
                if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                    obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_主成分回帰(グループ1)']);
                else
                    obj.saveGraphWithName('_主成分回帰(グループ1)');
                end

                
                %%
            MonitorSize = [ 0, 0, 500, 500];
            set(gcf, 'Position', MonitorSize);

            [fitParam_g1, X1FIT, X2FIT, YFIT , fitR, yhat, fitR2 ,resError, SER ]  = Rhythm.approxiSurface_flat(dT_zc(indexG1) , dA_zc(indexG1) , Y_zc(indexG1) );
            plot3( dT_zc(indexG1) , dA_zc(indexG1) , Y_zc(indexG1),   'Marker','*', 'LineStyle','none');
            hold on
%                 plot3( X1_nzc  , X2_nzc , Y_nzc, 'Marker','o', 'LineStyle','none');
                mesh(X1FIT,X2FIT,YFIT, 'faceAlpha',0.5);
            hold off
            grid on
            view(-30,30);
            xlabel('操作波形 周期の差');  ylabel('操作波形 振幅の差');  zlabel('対数演算前アバタ速さ');
            xlim([0 600]);            ylim([0 600]);          zlim([0 50000]);

            if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                xlim([0,600]);      ylim([0,600]);         zlim([0 50000]);
            end

            [zY_zc , m_Y , s_Y]  = zscore( Y_zc(indexG1) );
            [zX1_zc , m_X1 , s_X1] = zscore( dT_zc(indexG1));
            [zX2_zc , m_X2 , s_X2] = zscore( dA_zc(indexG1));
            [zfitParam_g1, zX1FIT, zX2FIT, zYFIT , zfitR, zyhat, zfitR2 ]  = Rhythm.approxiSurface_flat(zX1_zc , zX2_zc , zY_zc );

            title({['V = (' num2str(fitParam_g1(1)) ') + (' num2str( fitParam_g1(2) ) ') * dPeriod + (' num2str( fitParam_g1(3)) ') * dPeak']; ...
                      ['標準化係数　dPeriod：' num2str( zfitParam_g1(2) ) '，dPeak：' num2str( zfitParam_g1(3) )];...
                    ['相関係数R：' num2str( fitR ) '，決定係数R^2：' num2str( fitR2 ) '，標準誤差(残差の標準偏差)：' num2str(SER) ];...
                  ['データ数:' num2str( length(user.time.highSampled)  - obj.config.analyzeTime(1) ) '[ms],(' num2str( length(Y_zc) ) ')' ] });
            axis square
            %%
            if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_標準偏回帰係数(グループ1)']);
            else
                obj.saveGraphWithName('_標準偏回帰係数(グループ1)');
            end


            
            %%
            % 回帰直線(クラスタ１)との距離(クラスタ１のデータ)
    %             figure
%                 [vector_HP_g1a , distError_g1a , distMean_g1a] = Rhythm.PCA_regDist(dT_zc(indexG1) , dA_zc(indexG1) , Y_zc(indexG1) , k1_g1, k2_g1 , X1_g1, mean([dT_zc(indexG1) , dA_zc(indexG1)]) ,  fitParam_X1Y_g1, bFig );
                %%
                clf;
            %%
            % 回帰直線(クラスタ１)との距離(全データ)
    %             figure
                [vector_HP_g1 , distError_g1 , distMean_g1] = Rhythm.PCA_regDist(dT_zc , dA_zc , Y_zc , k1_g1, k2_g1 , X1_g1, mean([dT_zc(indexG1) , dA_zc(indexG1)]) ,  fitParam_X1Y_g1, bFig );
                view(-30 , 30)
                %%
                clf;
            %%
            % クラスター2
                 figure
                [k1_g2 , k2_g2, X1_g2, fitParam_X1Y_g2, fitLineR_X1Y_g2] = Rhythm.PCA_regress_3dplot(dT_zc(indexG2) , dA_zc(indexG2) , Y_zc(indexG2) , bFig) ;
                %%

                if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                    obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_主成分回帰(グループ2)']);
                else
                    obj.saveGraphWithName('_主成分回帰(グループ2)');
                end

                %%
            MonitorSize = [ 0, 0, 500, 500];
            set(gcf, 'Position', MonitorSize);

            [fitParam_g2, X1FIT, X2FIT, YFIT , fitR, yhat, fitR2 ,resError, SER ]  = Rhythm.approxiSurface_flat(dT_zc(indexG2) , dA_zc(indexG2) , Y_zc(indexG2) );
            plot3( dT_zc(indexG2) , dA_zc(indexG2) , Y_zc(indexG2),   'Marker','*', 'LineStyle','none');
            hold on
%                 plot3( X1_nzc  , X2_nzc , Y_nzc, 'Marker','o', 'LineStyle','none');
                mesh(X1FIT,X2FIT,YFIT, 'faceAlpha',0.5);
            hold off
            grid on
            view(-30,30);
            xlabel('操作波形 周期の差');  ylabel('操作波形 振幅の差');  zlabel('対数演算前アバタ速さ');
            xlim([0 600]);            ylim([0 600]);          zlim([0 50000]);

            if isempty(  findstr( char( obj.config.examType ) , '自由操作'))
                xlim([0,600]);      ylim([0,600]);         zlim([0 50000]);
            end

            [zY_zc , m_Y , s_Y]  = zscore( Y_zc(indexG2) );
            [zX1_zc , m_X1 , s_X1] = zscore( dT_zc(indexG2));
            [zX2_zc , m_X2 , s_X2] = zscore( dA_zc(indexG2));
            [zfitParam_g2, zX1FIT, zX2FIT, zYFIT , zfitR, zyhat, zfitR2 ]  = Rhythm.approxiSurface_flat(zX1_zc , zX2_zc , zY_zc );

            title({['V = (' num2str(fitParam_g2(1)) ') + (' num2str( fitParam_g2(2) ) ') * dPeriod + (' num2str( fitParam_g2(3)) ') * dPeak']; ...
                      ['標準化係数　dPeriod：' num2str( zfitParam_g2(2) ) '，dPeak：' num2str( zfitParam_g2(3) )];...
                    ['相関係数R：' num2str( fitR ) '，決定係数R^2：' num2str( fitR2 ) '，標準誤差(残差の標準偏差)：' num2str(SER) ];...
                  ['データ数:' num2str( length(user.time.highSampled)  - obj.config.analyzeTime(1) ) '[ms],(' num2str( length(Y_zc) ) ')' ] });
            axis square
            %%
            if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_標準偏回帰係数(グループ2)']);
            else
                obj.saveGraphWithName('_標準偏回帰係数(グループ2)');
            end


            %%
            % 回帰直線（クラスタ２）との距離(クラスタ2のデータ)
                 figure
                [vector_HP_g2a , distError_g2a , distMean_g2a] = Rhythm.PCA_regDist(dT_zc(indexG2) , dA_zc(indexG2) , Y_zc(indexG2) , k1_g2, k2_g2 ,X1_g2, mean([dT_zc(indexG2) , dA_zc(indexG2)]) , fitParam_X1Y_g2, bFig );
                %%
                clf;
            %%
            % 回帰直線(クラスタ2)との距離(全データ)
                figure
                [vector_HP_g2 , distError_g2 , distMean_g2] = Rhythm.PCA_regDist(dT_zc , dA_zc , Y_zc , k1_g2, k2_g2 ,X1_g2, mean([dT_zc(indexG2) , dA_zc(indexG2)]) , fitParam_X1Y_g2, bFig );
                view(-30 , 30)
                %%
                clf;
    %%        全体データ散布図
    %              figure(220);
                MonitorSize = [ 0, 0, 500, 500];
                set(gcf, 'Position', MonitorSize);
                lineEdgePoint_X1Y_g1 = [ min(X1_g1)*k1_g1 , min(X1_g1)*k2_g1 , polyval( fitParam_X1Y_g1, min(X1_g1) ) ;...
                                        max(X1_g1)*k1_g1 , max(X1_g1)*k2_g1 , polyval( fitParam_X1Y_g1, max(X1_g1) ) ];
                lineEdgePoint_X1Y_g2 = [ min(X1_g2)*k1_g2 , min(X1_g2)*k2_g2 , polyval( fitParam_X1Y_g2, min(X1_g2) ) ;...
                                        max(X1_g2)*k1_g2 , max(X1_g2)*k2_g2 , polyval( fitParam_X1Y_g2, max(X1_g2) ) ];
                plot3( [0 0],[0 0],[0 0],'k' );
                hold on
    %                 plot3(dT_zc, dA_zc , Y_zc ,'Color' , 'k' );
                    plot3(dT_zc(indexG01) , dA_zc(indexG01) , Y_zc(indexG01) ,'Color' , 'b' ,'Marker','*', 'LineStyle','none','MarkerSize',2);
                    plot3(dT_zc(indexG02) , dA_zc(indexG02) , Y_zc(indexG02) ,'Color' , [0 .5 0] ,'Marker','*', 'LineStyle','none','MarkerSize',3);
                    plot3(dT_zc(indexG0) , dA_zc(indexG0) , Y_zc(indexG0) ,'Color' , 'c' ,'Marker','*', 'LineStyle','none','MarkerSize',2);

                    plot3(  [ -100*k1_g1 ; 500*k1_g1 ] + mean(dT_zc(indexG1)) , [ -100*k2_g1 ; 500*k2_g1 ] + mean(dA_zc(indexG1)) , zeros(2,1) , 'r');
                    plot3( lineEdgePoint_X1Y_g1(:,1) + mean(dT_zc(indexG1)) , lineEdgePoint_X1Y_g1(:,2) + mean(dA_zc(indexG1)), lineEdgePoint_X1Y_g1(:,3) ,'r' ,'LineWidth',3 );
                    plot3( [ lineEdgePoint_X1Y_g1(2,1) + mean(dT_zc(indexG1)) ,lineEdgePoint_X1Y_g1(2,1)+ mean(dT_zc(indexG1)) ] ,...
                           [ lineEdgePoint_X1Y_g1(2,2)+ mean(dA_zc(indexG1)) , lineEdgePoint_X1Y_g1(2,2)+ mean(dA_zc(indexG1)) ] ,...
                           [0 lineEdgePoint_X1Y_g1(2,3)] ,'--r' );              % 垂線

                    plot3(  [ -100*k1_g2 ; 500*k1_g2 ] + mean(dT_zc(indexG2)) , [ -100*k2_g2 ; 500*k2_g2 ] + mean(dA_zc(indexG2)) , zeros(2,1) , 'r');
                    plot3( lineEdgePoint_X1Y_g2(:,1) + mean(dT_zc(indexG2)) , lineEdgePoint_X1Y_g2(:,2) + mean(dA_zc(indexG2)), lineEdgePoint_X1Y_g2(:,3) ,'r' ,'LineWidth',3 );
                    plot3( [ lineEdgePoint_X1Y_g2(2,1) + mean(dT_zc(indexG2)) , lineEdgePoint_X1Y_g2(2,1) + mean(dT_zc(indexG2)) ] ,...
                           [ lineEdgePoint_X1Y_g2(2,2) + mean(dA_zc(indexG2))  lineEdgePoint_X1Y_g2(2,2) + mean(dA_zc(indexG2))  ] ,...
                           [0 lineEdgePoint_X1Y_g2(2,3)] ,'--r' );              % 垂線
                    plot3(dT_nzc, dA_nzc , Y_nzc ,'Color' , 'b' ,'Marker','o', 'LineStyle','none' );

                hold off
                grid on
                axis square
                        view(-30,25);
                title({['theta1 =(' num2str( atan(k2_g1/k1_g1) *180 / pi ) ')[deg]，X1-Vの傾き：' num2str( fitParam_X1Y_g1(1) ) ...
                            '，相関係数R：' num2str( fitLineR_X1Y_g1(1)) '，決定係数R^2：' num2str( fitLineR_X1Y_g1(1)^2)];...
                       ['theta2 =(' num2str( atan(k2_g2/k1_g2) *180 / pi ) ')[deg]，X2-Vの傾き：' num2str( fitParam_X1Y_g2(1) ) ...
                            '，相関係数R：' num2str( fitLineR_X1Y_g2(1)) '，決定係数R^2：' num2str( fitLineR_X1Y_g2(1)^2)]});
                xlabel('操作波形 周期の差dT');  ylabel('操作波形 振幅の差dA');  zlabel('対数演算前アバタ速さV');
                xlim([0 400]);            ylim([0 400]);          zlim([0 40000]);

    %            title({ ['V = (' num2str(fitParam3d(1)) ') + (' num2str( fitParam3d(2) ) ') * ΔT + (' num2str( fitParam3d(3)) ') * ΔA'] ;...
    %                 []});
                axis square
    %%
                MonitorSize = [ 0, 0, 500, 500];
                set(gcf, 'Position', MonitorSize);

                if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                    obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_重回帰分析（group1,2重ね合わせ）']);
                else
                    obj.saveGraphWithName('_重回帰分析（group1,2重ね合わせ）');
                end

       %% クラスタの時系列変化

                NumG01 = 1;
                NumG0 = 1.5;
                NumG02 = 2;
                figure
                MonitorSize = [ 0, 0, 1200, 1000];
                set(gcf, 'Position', MonitorSize);
                %%
                a1 = subplot(4,1,1);
                indexGroup = [indexG0 NumG0*ones(length(indexG0),1); ...
                              indexG01 NumG01*ones(length(indexG01),1); ...
                              indexG02 NumG02*ones(length(indexG02),1);];
                indexGroup = sortrows(indexGroup, 1);
                group= indexGroup(:,2);
                plot( Time_zc , group , '-');
    %             plot( Time_zc , group , '-*');
                hold on 
    %                 for i= 1:length(Y_nzc)
    %                     plot( [Time_nzc(i)  Time_nzc(i)] , [0 1000] , 'r' );
    %                 end
                hold off
                xlabel('時間');  ylabel('所属グループ');
                xlim([0 60000]);            ylim([0.5 2.5]);
                set(gca, 'YTick' , [ 1 1.5 2]);

                a2 =  subplot(4,1,2);
                plot( [0 0],[0 0],'k' );
                hold on
                    plot(Time_zc , distError_g1 , 'b' );
                    plot(Time_zc , distError_g2 , 'Color' , [0 .5 0]);
                hold off
                xlabel('時間');   ylabel('各グループの近似直線との距離');
                xlim([0 60000]);             ylim([0 200]);
                title('青：グループ1の近似直線との距離　緑：グループ２の近似直線との距離');
    %%
                a3 = subplot(4,1,3);
                d_threshold = 12;
                for i = 1:Nzc
                    if distError_g1(i) - distError_g2(i) < 0
                        group_d(i,1) = 1;
                    elseif distError_g2(i) - distError_g1(i) < 0
                        group_d(i,1) = 2;
                    end
%                     disp(group_d);
                    if abs( distError_g1(i) - distError_g2(i) ) < d_threshold
                        if ~i==1;
                        group_d(i,1) = group_d(i-1,1);
                        end
                    end
                end
                plot( Time_zc , group_d , '-');
%                 plot( Time_zc , group_d , '-*');
                hold on 
                    for i= 1:length(Y_nzc)
                        plot( [Time_nzc(i)  Time_nzc(i)] , [0 1000] , 'r' );
                    end
                hold off
                xlabel('時間');  ylabel('所属グループ');
                xlim([0 60000]);            ylim([0.5 2.5]);
                set(gca, 'YTick' , [ 1 1.5 2]);

                a4 = subplot(4,1,4);
                plot( [0 0],[0 0],'k' );
                hold on
                %     for i = 1 : length(indexG0)
                %         fill([Time_zc(indexG0(i)-2) Time_zc(indexG0(i)-2) Time_zc(indexG0(i)) Time_zc(indexG0(i))] , ...
                %              [0 1000 1000 0]  ,[.8 .9 .9], 'LineStyle', 'none');
                %     end
                indexGd1 = find( group_d == 1 );
                indexGd2 = find( group_d == 2 );
                    for i = 2 : length(indexGd1)
                        fill([Time_zc(indexGd1(i)-1) Time_zc(indexGd1(i)-1) Time_zc(indexGd1(i)) Time_zc(indexGd1(i))] , ...
                             [0 1000 1000 0]  ,[.8 .8 1], 'LineStyle', 'none');
                    end
                    for i = 2 : length(indexGd2)
                        fill([Time_zc(indexGd2(i)-1) Time_zc(indexGd2(i)-1) Time_zc(indexGd2(i)) Time_zc(indexGd2(i))] , ...
                             [0 1000 1000 0]  ,[.8 1 .8], 'LineStyle', 'none');
                    end
                    plot( obj.data.player1.time.highSampled , obj.data.player1.avatarPosition.highSampled ,'k', 'LineWidth' , 2);
                    plot( obj.data.player2.time.highSampled , obj.data.player2.avatarPosition.highSampled ,'k');
                    plot( obj.data.player2.time.highSampled , abs( obj.data.player2.avatarPosition.highSampled - obj.data.player1.avatarPosition.highSampled ) ,'r');
                    for i= 1:length(Y_nzc)
                        plot( [Time_nzc(i)  Time_nzc(i)] , [0 1000] , 'r' );
                    end
                hold off
                xlabel('時間');  ylabel('アバタ位置');
                xlim([0 60000]);            ylim([0 1000]);

                linkaxes([a1 a2 a3 a4],'x');

        %%

                if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                    obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_2次元相関（group1,2重ね合わせ）']);
                else
                    obj.saveGraphWithName('_グループ時系列変化）');
                end

    %%        全体データ散布図
                 figure(230);
                MonitorSize = [ 0, 0, 500, 500];
                set(gcf, 'Position', MonitorSize);
                lineEdgePoint_X1Y_g1 = [ min(X1_g1)*k1_g1 , min(X1_g1)*k2_g1 , polyval( fitParam_X1Y_g1, min(X1_g1) ) ;...
                                        max(X1_g1)*k1_g1 , max(X1_g1)*k2_g1 , polyval( fitParam_X1Y_g1, max(X1_g1) ) ];
                lineEdgePoint_X1Y_g2 = [ min(X1_g2)*k1_g2 , min(X1_g2)*k2_g2 , polyval( fitParam_X1Y_g2, min(X1_g2) ) ;...
                                        max(X1_g2)*k1_g2 , max(X1_g2)*k2_g2 , polyval( fitParam_X1Y_g2, max(X1_g2) ) ];
                plot3( [0 0],[0 0],[0 0],'k' );
                hold on
                    plot3(dT_nzc, dA_nzc , Y_nzc ,'Color' , 'b' ,'Marker','o', 'LineStyle','none' );
                    plot3(dT_zc(indexGd1) , dA_zc(indexGd1) , Y_zc(indexGd1) ,'Color' , 'b' ,'Marker','*', 'LineStyle','none','MarkerSize',2);
                    plot3(dT_zc(indexGd2) , dA_zc(indexGd2) , Y_zc(indexGd2) ,'Color' , [0 .5 0] ,'Marker','*', 'LineStyle','none','MarkerSize',3);

                    plot3(  [ -100*k1_g1 ; 500*k1_g1 ] + mean(dT_zc(indexG1)) , [ -100*k2_g1 ; 500*k2_g1 ] + mean(dA_zc(indexG1)) , zeros(2,1) , 'r');
                    plot3( lineEdgePoint_X1Y_g1(:,1) + mean(dT_zc(indexG1)) , lineEdgePoint_X1Y_g1(:,2) + mean(dA_zc(indexG1)), lineEdgePoint_X1Y_g1(:,3) ,'r' ,'LineWidth',3 );
                    plot3( [ lineEdgePoint_X1Y_g1(2,1) + mean(dT_zc(indexG1)) ,lineEdgePoint_X1Y_g1(2,1)+ mean(dT_zc(indexG1)) ] ,...
                           [ lineEdgePoint_X1Y_g1(2,2)+ mean(dA_zc(indexG1)) , lineEdgePoint_X1Y_g1(2,2)+ mean(dA_zc(indexG1)) ] ,...
                           [0 lineEdgePoint_X1Y_g1(2,3)] ,'--r' );              % 垂線

                    plot3(  [ -100*k1_g2 ; 500*k1_g2 ] + mean(dT_zc(indexG2)) , [ -100*k2_g2 ; 500*k2_g2 ] + mean(dA_zc(indexG2)) , zeros(2,1) , 'r');
                    plot3( lineEdgePoint_X1Y_g2(:,1) + mean(dT_zc(indexG2)) , lineEdgePoint_X1Y_g2(:,2) + mean(dA_zc(indexG2)), lineEdgePoint_X1Y_g2(:,3) ,'r' ,'LineWidth',3 );
                    plot3( [ lineEdgePoint_X1Y_g2(2,1) + mean(dT_zc(indexG2)) , lineEdgePoint_X1Y_g2(2,1) + mean(dT_zc(indexG2)) ] ,...
                           [ lineEdgePoint_X1Y_g2(2,2) + mean(dA_zc(indexG2))  lineEdgePoint_X1Y_g2(2,2) + mean(dA_zc(indexG2))  ] ,...
                           [0 lineEdgePoint_X1Y_g2(2,3)] ,'--r' );              % 垂線

                hold off
                grid on
                axis square
                        view(-30,25);
                xlabel('操作波形 周期の差dT');  ylabel('操作波形 振幅の差dA');  zlabel('対数演算前アバタ速さV');
                xlim([0 600]);            ylim([0 600]);          zlim([0 50000]);

    %            title({ ['V = (' num2str(fitParam3d(1)) ') + (' num2str( fitParam3d(2) ) ') * ΔT + (' num2str( fitParam3d(3)) ') * ΔA'] ;...
    %                 []});
                axis square
    %%
%                 MonitorSize = [ 0, 0, 800, 800];
%                 set(gcf, 'Position', MonitorSize);

                set(gcf, 'Position', [ 0 0 500 500]);
                if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                    obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_重回帰分析（距離でgroup分け）']);
                else
                    obj.saveGraphWithName('_重回帰分析（距離でgroup分け）');
                end

                %%      近似面　係数　エクセルデータ出力
    %             VIF = Rhythm.getVIF([dT_zc , dA_zc , dT_zc .*dA_zc ]);
    %             outputTitle = { '定数項' , '周期差' , '振幅差','振幅差＊周期差',...
    %                                     'VIF(周期差)', 'VIF（振幅差）', 'VIF（交互作用）','重相関R','重決定R2' };
    %             output = num2cell( [fitParam3' VIF fitR fitR2] );
    %             obj.outputAllToXls(output , outputTitle);
%            end
        end

        function runForPair(obj,user1 ,user2)
%             obj.runForAlone(user1);
%             obj.runForAlone(user2);
%             
            
        end

        
    end
end
