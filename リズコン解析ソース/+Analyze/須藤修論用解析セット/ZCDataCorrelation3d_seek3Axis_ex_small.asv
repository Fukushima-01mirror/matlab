classdef ZCDataCorrelation3d_seek3Axis_ex_small < Analyze.Base
    %STANDARDDEVIATION このクラスの概要をここに記述
    %   詳細説明をここに記述

    properties
    end

    methods
        function obj = ZCDataCorrelation3d_seek3Axis_ex_small(config,data)
            obj = obj@Analyze.Base(config,data);
        end

        function runForAlone(obj,user)
           [period_zx, peak_zx] = Rhythm.setZeroCrossPeriodData(user.zeroCrossData);
           %　ゼロクロス間でのピーク回数取得
           [zeroCrossTimes] = Rhythm.setZeroCrossCount(user.zeroCrossData);
            
            Y = abs( user.zeroCrossData.nonlogAvtVelocity );
            dT = abs( period_zx(:,3) );
            dA = abs( peak_zx(:,3) );
            Time = abs( user.zeroCrossData.zeroCrossTime );
            
            if obj.currentRunType == obj.runTypePlayer1
                IndexZeroCross = find(zeroCrossTimes(:,1)<2&zeroCrossTimes(:,2)<2 ...
                    & obj.data.player1.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
                IndexNonZeroCross = find( zeroCrossTimes(:,1)>1|zeroCrossTimes(:,2)>1 ...
                    & obj.data.player1.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
            elseif obj.currentRunType == obj.runTypePlayer2
                IndexZeroCross = find(zeroCrossTimes(:,1)<2&zeroCrossTimes(:,2)<2 ...
                    & obj.data.player2.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
                IndexNonZeroCross = find( zeroCrossTimes(:,1)>1|zeroCrossTimes(:,2)>1 ...
                    & obj.data.player2.zeroCrossData.zeroCrossTime > obj.config.analyzeTime(1) );
            end

            Y_zc  = Y(IndexZeroCross);        Y_nzc  = Y(IndexNonZeroCross);
            dT_zc = dT(IndexZeroCross,:);     dT_nzc = dT(IndexNonZeroCross,:);
            dA_zc = dA(IndexZeroCross,:);     dA_nzc = dA(IndexNonZeroCross,:);
            Time_zc = Time(IndexZeroCross);   Time_nzc  = Time(IndexNonZeroCross);
            
            %外れ値を除外するため，最大データ２つをカット
            [dT_max,dT_imax] = max(dT_zc);     dT_zc(dT_imax)= [];	 dA_zc(dT_imax)= [];     Y_zc(dT_imax)= [];     Time_zc(dT_imax)= [];
            [dT_max,dT_imax] = max(dT_zc);     dT_zc(dT_imax)= [];	 dA_zc(dT_imax)= [];     Y_zc(dT_imax)= [];     Time_zc(dT_imax)= [];
            [dA_max,dA_imax] = max(dA_zc);     dT_zc(dA_imax)= [];	 dA_zc(dA_imax)= [];     Y_zc(dA_imax)= [];     Time_zc(dA_imax)= [];
            [dA_max,dA_imax] = max(dA_zc);     dT_zc(dA_imax)= [];	 dA_zc(dA_imax)= [];     Y_zc(dA_imax)= [];     Time_zc(dA_imax)= [];
%             [Y_max,Y_imax] = max(Y_zc);     dT_zc(Y_imax)= [];	 dA_zc(Y_imax)= [];     Y_zc(Y_imax)= [];
%             [Y_max,Y_imax] = max(Y_zc);     dT_zc(Y_imax)= [];	 dA_zc(Y_imax)= [];     Y_zc(Y_imax)= [];
%             while max(Y_zc./dT_zc) > 500
%                 [Y_dT_max,Y_dT_imax] = max(Y_zc./dT_zc);     dT_zc(Y_dT_imax)= [];	 dA_zc(Y_dT_imax)= [];     Y_zc(Y_dT_imax)= [];
%                 [Y_dT_max,Y_dT_imax] = max(Y_zc./dT_zc);     dT_zc(Y_dT_imax)= [];	 dA_zc(Y_dT_imax)= [];     Y_zc(Y_dT_imax)= [];
%             end
%             while max(Y_zc./dA_zc) > 500
%                 [Y_dA_max,Y_dA_imax] = max(Y_zc./dA_zc);     dT_zc(Y_dA_imax)= [];	 dA_zc(Y_dA_imax)= [];     Y_zc(Y_dA_imax)= [];
%                 [Y_dA_max,Y_dA_imax] = max(Y_zc./dA_zc);     dT_zc(Y_dA_imax)= [];	 dA_zc(Y_dA_imax)= [];     Y_zc(Y_dA_imax)= [];
%             end
 
            Nzc = length(Y_zc) ;
            Nnzc = length(Y_nzc) ;
            
          %% グループ分け
%             dA_border =50;
%             dT_border = 50;
            k_border = 3/2;
            k_border1 = 2/4;
%             indexG0 = find( dT_zc < dT_border & dA_zc < dA_border );
%             indexG01 = find( dT_zc >= dT_border & (dA_zc)./dT_zc <= k_border );
%             indexG02 = find( dA_zc >= dA_border & (dA_zc)./dT_zc > k_border );

%             indexG1 = sort([indexG0 ; indexG01]);
%             indexG2 = sort([indexG0 ; indexG02]);
% 
%             indexG01 = find( (dA_zc)./dT_zc <= k_border );
%             indexG2 = indexG02;

            indexG1 = find( (dA)./dT <= k_border & (dA)./dT >= k_border1 );
            indexG2 = find( (dA)./dT > k_border );
            indexG3 = find( (dA)./dT < k_border1 );
            
            %% グラフ出力
            bFig = 0;
            % クラスター１
            [k1_g1 , k2_g1, X1_g1, fitParam_X1Y_g1, fitLineR_X1Y_g1,  distError , distMean] = Rhythm.PCA_regress_3dplot(dT_zc(indexG1) , dA_zc(indexG1) , abs(Y_zc(indexG1)) , bFig);
            % クラスター２
            [k1_g2 , k2_g2, X1_g2, fitParam_X1Y_g2, fitLineR_X1Y_g2,  distError , distMean] = Rhythm.PCA_regress_3dplot(dT_zc(indexG2) , dA_zc(indexG2) , abs(Y_zc(indexG2)) , bFig);
            % クラスター３
            [k1_g3 , k2_g3, X1_g3, fitParam_X1Y_g3, fitLineR_X1Y_g3,  distError , distMean] = Rhythm.PCA_regress_3dplot(dT_zc(indexG3) , dA_zc(indexG3) , abs(Y_zc(indexG3)) , bFig);

            lineEdgePoint_X1Y_g1 = [ min(X1_g1)*k1_g1 , min(X1_g1)*k2_g1 , polyval( fitParam_X1Y_g1, min(X1_g1) ) ;...
                max(X1_g1)*k1_g1 , max(X1_g1)*k2_g1 , polyval( fitParam_X1Y_g1, max(X1_g1) ) ];
            lineEdgePoint_X1Y_g2 = [ min(X1_g2)*k1_g2 , min(X1_g2)*k2_g2 , polyval( fitParam_X1Y_g2, min(X1_g2) ) ;...
                max(X1_g2)*k1_g2 , max(X1_g2)*k2_g2 , polyval( fitParam_X1Y_g2, max(X1_g2) ) ];
            lineEdgePoint_X1Y_g3 = [ min(X1_g3)*k1_g3 , min(X1_g3)*k2_g3 , polyval( fitParam_X1Y_g3, min(X1_g3) ) ;...
                max(X1_g3)*k1_g3 , max(X1_g3)*k2_g3 , polyval( fitParam_X1Y_g3, max(X1_g3) ) ];
            
            hold on

            % データプロット
            plot3( dT_zc(indexG1), dA_zc(indexG1), abs(Y_zc(indexG1)), 'Color', 'b', 'Marker', '*', 'LineStyle', 'none' );
            plot3( dT_zc(indexG2), dA_zc(indexG2), abs(Y_zc(indexG2)), 'Color', [0,0.6,0], 'Marker', '*', 'LineStyle', 'none' );
            plot3( dT_zc(indexG3), dA_zc(indexG3), abs(Y_zc(indexG3)), 'Color', [0,0.6,0], 'Marker', '*', 'LineStyle', 'none' );
            % plot3( dT(1:length(dT)-2), dA(1:length(dA)-2), abs(v_avt), 'Marker', '*', 'LineStyle', 'none' );
            % plot3( dT(1:length(dT)-3), dA(1:length(dA)-3), abs(v_avt(2:length(v_avt))), 'Marker', '*', 'LineStyle', 'none' );
            % plot3( dT(5:length(dT)), dA(5:length(dA)), abs(v_avt(1:length(v_avt)-2)), 'Marker', '*', 'LineStyle', 'none' );

            % 回帰直線
            plot3(  [ -100*k1_g1 ; 500*k1_g1 ] + mean(dT_zc(indexG1)) , [ -100*k2_g1 ; 500*k2_g1 ] + mean(dA_zc(indexG1)) , zeros(2,1) , 'r' );
            plot3( lineEdgePoint_X1Y_g1(:,1) + mean(dT_zc(indexG1)) , lineEdgePoint_X1Y_g1(:,2) + mean(dA_zc(indexG1)), lineEdgePoint_X1Y_g1(:,3) ,'r' ,'LineWidth',3 );
            plot3( [ lineEdgePoint_X1Y_g1(2,1) + mean(dT_zc(indexG1)) ,lineEdgePoint_X1Y_g1(2,1)+ mean(dT_zc(indexG1)) ] ,...
                [ lineEdgePoint_X1Y_g1(2,2)+ mean(dA_zc(indexG1)) , lineEdgePoint_X1Y_g1(2,2)+ mean(dA_zc(indexG1)) ] ,...
                [0 lineEdgePoint_X1Y_g1(2,3)] ,'--r' );              % 垂線

            plot3(  [ -100*k1_g2 ; 500*k1_g2 ] + mean(dT_zc(indexG2)) , [ -100*k2_g2 ; 500*k2_g2 ] + mean(dA_zc(indexG2)) , zeros(2,1) , 'r' );
            plot3( lineEdgePoint_X1Y_g2(:,1) + mean(dT_zc(indexG2)) , lineEdgePoint_X1Y_g2(:,2) + mean(dA_zc(indexG2)), lineEdgePoint_X1Y_g2(:,3) ,'r' ,'LineWidth',3 );
            plot3( [ lineEdgePoint_X1Y_g2(2,1) + mean(dT_zc(indexG2)) ,lineEdgePoint_X1Y_g2(2,1)+ mean(dT_zc(indexG2)) ] ,...
                [ lineEdgePoint_X1Y_g2(2,2)+ mean(dA_zc(indexG2)) , lineEdgePoint_X1Y_g2(2,2)+ mean(dA_zc(indexG2)) ] ,...
                [0 lineEdgePoint_X1Y_g2(2,3)] ,'--r' );              % 垂線

            hold off

            
%%           主成分回帰分析
%             set(gcf, 'Position', [ 0, 0, 500, 500]);    bFig = 1;
%             [k1 , k2, X1, fitParam_X1Y, fitLineR_X1Y] = Rhythm.PCA_regress_3dplot(dT_zc , dA_zc , Y_zc , bFig) ;
%             hold on
%                 plot3(dT_nzc, dA_nzc , Y_nzc ,'Color' , 'b' ,'Marker','o', 'LineStyle','none' );
%             hold off
            grid on;
            view(-30,30);
            xlabel('操作波形 周期の差');  ylabel('操作波形 振幅の差');  zlabel('対数演算前アバタ速さ');
            xlim([0 400]);            ylim([0 400]);          zlim([0 40000]);
%             set(gcf, 'Position', [0 0 500 500]);
            
            %%
           if ~isempty(strfind( char(obj.config.examType) , '剣道対戦'))
                obj.saveGraphWithName( [ num2str( obj.data.splitTimeInfo.index ) '_' obj.data.splitTimeInfo.state '_主成分回帰分析']);
            else
                obj.saveGraphWithName('_主成分回帰分析');
            end
            
        end

        function runForPair(obj,user1 ,user2)
%             obj.runForAlone(user1);
%             obj.runForAlone(user2);
%             
            
        end

        
    end
end
